devtools::install_github("geocompr/geocompkg")
devtools::install_github("geocompr/geocompkg",)
devtools::install_github("geocompr/geocompkg",force=T)
bookdown::render_book("index.Rmd") # to build the book
source('~/R Programm/i2ml programm/final project/i2ml_final_project/i2ml_finalproject.R')
# get & set work dir
getwd()
setwd("../final project")
# get & set work dir
getwd()
setwd("./i2ml programm/final project")
source('~/R Programm/i2ml programm/final project/i2ml_final_project/i2ml_finalproject.R')
setwd("../i2ml programm/final project")
# read data
data <- read_excel("dat_final.xlsx")
# function that changes two variables to our binary target
# input: first_variable,second_variable: name of variables, dtype = str
make_target <- function(first_variable, second_variable) {
# select two variables from our data
select(data, first_variable, second_variable) %>%
map(diff, lag = 1) %>% # caculate first order of diff.
# if diff. < 0, means the numbers go down, mark as 1, otherwise as 0
map(function(x) ifelse(x < 0, 1, 0)) %>%
# change as tibble(a type of data.frame) for the next function (transmute)
as.tibble() %>%
# compute new column "target" = first_variable + second_variable ,drop other variables
transmute(target = .data[[first_variable]] + .data[[second_variable]]) %>%
# if target == 2, means both variables go down, sign 1, otherwise 0.
map(function(x) ifelse(x == 2, 1, 0)) %>%
# change as facotor
map(as.factor) %>%
# change as tibble(a type of data.frame)
as_tibble()
}
#   as.tibble()
# b <- select(data, DGS1, SP500) %>%
#   map(diff, lag = 1) %>%
#   map(function(x) ifelse(x < 0, 1, 0)) %>%
#   as.tibble() %>%
#   transmute(target = DGS1 + SP500) %>%
#   map(function(x) ifelse(x == 2, 1, 0)) %>%
#   map(as.factor) %>%
#   as.tibble()
# function to make the whole dataset.
make_data <- function(data, first_variable, second_variable) {
# select all the variables except variables used to compute target
select(data, -first_variable, -second_variable) %>%
# we will lose one row because we calculate diff.
slice(-1) %>%
# add y to the remaining variable.
add_column(y = make_target(first_variable, second_variable))
}
# get 4 diff. target
usd_risk_exposure_1 <- make_target("DGS1", "NASDAQCOM")
usd_risk_exposure_2 <- make_target("DGS1", "SP500")
usd_risk_exposure_3 <- make_target("DGS1", "SPASTT01USM657N")
eur_risk_exposure_1 <- make_target("ir_e1Y", "SPASTT01EZM657N")
# make datasets contain: target "y" and remaing variables.
# warning: lose one row because we calculate diff.
data_dgs_nasd <- make_data(data, "DGS1", "NASDAQCOM") # hebailan
data_dgs_sp <- make_data(data, "DGS1", "SP500") # alex
data_dgs_spa <- make_data(data, "DGS1", "SPASTT01USM657N") # xiong yue
data_ir_spa <- make_data(data, "ir_e1Y", "SPASTT01EZM657N") # yang rui
# save my data as Excel.
# sepecific my path
my_path <- "/Users/hebailan/R Programm/i2ml programm/final project/i2ml_final_project/bailanhe"
# write my data to the path.
write_csv2(x = data_dgs_nasd, path = paste0(my_path, "/data_dgs_nasd.csv"))
# library packages
library(tidyverse)
library(readxl)
library(rlang)
library(mlr3)
library(mlr3learners)
library(mlr3viz)
library(ggplot2)
getwd()
setwd("./i2ml_final_project/bailanhe")
#tuning
library("paradox")
library("mlr3tuning")
install.packages("mlr3tuning")
#tuning
library("paradox")
library("mlr3tuning")
as.data.table(mlr_resamplings)
resampling = rsmp("repeated_cv")
learner = lrn("classif.svm")
View(data_dgs_nasd)
